plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "jacoco"
    id "org.sonarqube" version "3.3"
    id 'maven-publish'
    id 'signing'
}

def snapshotVersion = "0.1.0-SNAPSHOT"

group = 'dev.gregorius.test'
version = project.hasProperty("releaseVersion") ? releaseVersion : snapshotVersion
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

def testCoverageExludes = []

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    jacoco {
        excludes += testCoverageExludes
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(
            fileTree(dir: "build/classes/java/main", excludes: testCoverageExludes)
        )
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'github.actions.test'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Github Actions Test'
                description = 'This is a test for Github actions'
                url = 'https://github.com/olivergregorius/github.actions.test'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'olivergregorius'
                        name = 'Oliver Gregorius'
                        email = 'oliver@gregorius.dev'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/olivergregorius/github.actions.test.git'
                    developerConnection = 'scm:git:https://github.com/olivergregorius/github.actions.test.git'
                    url = 'https://github.com/olivergregorius/github.actions.test'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "unknown"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "unknown"
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "olivergregorius_github.actions.test"
        property "sonar.organization", "olivergregorius"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.projectDir}/build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.coverage.exclusions", testCoverageExludes.join(",")
    }
}

tasks.register("getVersion") {
    println(project.version)
}
